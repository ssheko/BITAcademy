문제 ex) 분석단계에서 주요 설계 설계 모델 산출물이 아닌 것은?

= 업무 분석 단계의 산출물들 =
3.1.2.1.1 Conceptual Design Research

Business Context Diagram: 핵심 내용, 업체 간 주고받는 정보들 알아두기. 개념적으로 이해하기
-> ex) 내용에 대해 옳지 않은 것은?

3.1.2.2.2 Workflow Process
업무 프로세스를 큰 단위부터 Use case 단위까지 분해하는 것이 목적. (Top-Down 방식)
Workflow Process Diagram: 특정 작업들이 흘러가는 것을 그림으로 표현

UML 용어 (Unified Modeling Language): 객체지향 방법론의 객체, 흐름 표기법 통합
=> Ues case, Main Actor, Class Diagram 등등
Rational Rose. UML을 만든 Rational Software 회사에서 제작한 UML 툴
각 사람의 업무를 기술해 모든 Use Case를 조립하는 Bottom-Up방식보다 Top-Down이 훨씬 쉽다.

Workflow Process (내용만 알면 됨)
- Level 1. 전체
- Level 2. 구매 / 마케팅/ 관리,회계 / 영업 부서 단위로 나눔
- Level 3. 각 부서별 업무 구체화 (Use Case)

3.1.2.2.3 Use Case Scenario
Task Sequence Diagram (Optional). Use case 단계에서 복잡할 경우 선택적으로 이를 활용해 설명 추가 가능.
사전 준비 사항, 업무 처리 절차, 사후 처리 사항
기본 원칙은 하나의 Main Actor (한 명이 하나의 업무만. 한 업무를 두 명 이상이 맡을 경우 업무를 더 분해해야함)
최대한 구체적으로 작성.

Event 계획 - 한 번 읽어보기. 내용보다는 저 정도로 상세하게 적어야한다는 것에 주목

주문접수 - 문법 하나하나에 연연하지 말고 전체적으로 이렇게 작성해야 한다는 것만 볼 것

3.1.2.3. 고려사항
Data Flow가 아닌 Work Flow가 되도록 해야 한다.

3.1.3. Logical Design
ERD(Entity Relation Diagram) : Entity가 나중에 Table이 된다.
-> Class Diagram과 같이 작성.

3.1.3.1. 수행 절차
3.1.3.1.1. Logical Design Analysis
Service, Object, Attribute, Relationship 정의

3.1.3.1.2. Logical Design Rationalization
Implied Object, Service를 명시적으로 드러내야 함.

3.1.3.2. 세부 행동 설명
3.1.3.2.1. Object 추출 및 정의
Object, Attribute는 Class의 field가 된다.
이를 이용해 DBA는 Logical ERD 작성.
이 단계를 제대로 하지 않으면 Class가 나오지 않는 것을 의미

15. history 관리. 어느 부분이 잘못되었는지 확인하기 위해서. 반드시 원본 파일을 별도로 저장해둬야 함.
16. 특정 Use case에서 뽑아낸 단어인데 정렬하면 섞여버리기 때문에 이를 방지하는 차원에서.
17. 각각 Use case에서 작성하는 공통된 단어는 반드시 그대로 사용해야 한다. 
서로 다른 명칭으로 작성하면 같은 기능이어도 다른 명사로 인식하는 문제 발생.
18. 관련 Attribute를 묶어서 Class명을 부여. 

3.1.3.2.2. Object 상관도
OID (Object Interaction Diagram)
22. 요청 받은 클래스가 반드시 요청한 자에게 직접 응답을 해야 한다. 제 3자에게 응답을 주라고 할 수 없음.

3.1.3.2.3. Service 일반화
정리 단계 및 일반화 단계
30. 일반적으론 클래스명에 비즈니스 도메인을 붙임 (구분을 시키기 위해)

Service = Class의 메소드
Attribute = Class의 field

3.1.3.2.4 Class Diagram
추출한 클래스 도식화.

3.1.3.2.5. UI Scratch (Sketch)

3.1.3.2.6. Logical ERD (Entity Relation Diagram)
1차 논리적 ERD: DB 설계용.
Entity = Table
Relation = Table간의 제약조건
정규화도 DBA가 하는 업무.
ERWin 툴

3.1.3.3 고려사항
일반화, 상호통합

3.1.4. Physical Desgin
실제 구현 가능한 솔루션 제시.
3.1.4.1.1.
단계별 Risk Management 필요

3.1.4.1.2. Physical Design Analysis

3.1.4.1.3. Physical Design Relationalization
배포 모델, 전략 수립

3.1.4.2. 세부 행동 설명
3.1.4.2.1. Component 상관도
버튼을 눌렀을 때, 어떤 서비스를 타고, 어떤 컴포넌트를 타고 DB에 접근할 것인가를 만들겠다.
======================================여기부터 다시
3.1.4.2.2. Application 구조도

3.1.4.2.3. Component 명세
3.1.4.2.4. UI 명세
Case별로 회사별 Design 규칙을 적용하는지 여부 확인 후 작업

3.1.4.2.5. Physical ERD
DBMS 특성에 맞게 구성.

3.1.4.3. 고려사항

3.2. 구현
